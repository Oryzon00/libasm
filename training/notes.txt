 the first six arguments are loaded in the registers 
 RDI, RSI, RDX, RCX, R8, and R9

 Additional arguments are passed on the stack
 
 ---------------------------------------------------------------------------------------------

 Structure of a nasm program

	section .data	--> initialized data	--> d : define/declare	(static data for the program)
	section .bss	--> uninitialized data	--> res : reserve		(static data for the program)
	section .text	--> code

 bss -> Block Starting Symbol
 label are pointer to the first byte of the data array --> Ex: message

 ---------------------------------------------------------------------------------------------

 xor rdi, rdi	--> 1 opcode
 mov rdi, 0	--> 2 opcode

 $ --> current location (adress of the assembler)
 msg_len: equ  $-message --> create label equal to curretn address - address of label "message"

 times x --> repeat instruction x times ex: msg: times 100 db 0 (100 byte with value 0)

 ---------------------------------------------------------------------------------------------

 String constant 
 dx -> declare type x
 b -> byte			= 1 byte	( 8 bits  )
 w -> word			= 2 bytes	( 16 bits )
 d -> double		= 4 bytes	( 32 bits )
 q -> quadruple		= 8 bytes	( 64 bits )

 ---------------------------------------------------------------------------------------------

 mov <register>, <value> / <register>	--> move (put in)
 equ <value>							--> equal

 xor <register>, <value> / <register>	--> ou exclusif (false si same value)
 and ....
 or ....

 
 cmp <A> <B>	--> compare
 jmp <label>	--> jump to label

 je --> jump if A equal B ( A == B )
 jne --> jump if A not equal B ( A != B )

 jg --> jump if A greater than B ( A > B )
 jl --> jump if A lesser than B ( A < B )

 jge --> jump if A greater or equal than B ( A >= B )
 jle --> jump if B lesser or equal than B ( A <= B )

 jz --> jump if 0
 jnz --> jump if not 0

 ---------------------------------------------------------------------------------------------

 <Etiquette / label>:
 	<instruction> <operand(s)>
 	<instruction> <operand(s)>
 	<instruction> <operand(s)>

 ---------------------------------------------------------------------------------------------

 Directives
 Ex: bits 64, global, section, extern
 section == segment

 ---------------------------------------------------------------------------------------------

 nasm -f elf64 -o hello.o hello.asm
 ld -o hello hello.o
 ./hello

 ---------------------------------------------------------------------------------------------

inc <register> --> increment value in register
dec <register> --> decrement ....

neg <register> --> negative: inverse la valeur
not <register> --> inversion de bits: 0011 -> 1100

 ---------------------------------------------------------------------------------------------

add <A> <B> --> A + B --> resultat stock dans A
sub <A> <B> --> A - B
mul <A> --> rax * A --> resultat dans rax
div <A> --> rax / A --> division euclidienne !! Quotient dans rax, reste dans rdx 

 ---------------------------------------------------------------------------------------------

; 	arguments are  in the registers 
; 	RDI, RSI, RDX, RCX, R8, and R9

 ---------------------------------------------------------------------------------------------

Register -> rax
Memory adress -> [rax]
constant -> 10
